/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.iEngg.kafka.schemas;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class MatchSummary extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1912929879947136968L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"MatchSummary\",\"namespace\":\"com.iEngg.kafka.schemas\",\"fields\":[{\"name\":\"Team1\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"Team2\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"location\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"matchDate\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"matchNum\",\"type\":\"long\",\"default\":-1},{\"name\":\"result\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"stadium\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"team1Scores\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Score\",\"fields\":[{\"name\":\"PlayerName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"ballsPlayed\",\"type\":\"long\",\"default\":-1},{\"name\":\"run\",\"type\":\"long\",\"default\":-1}]},\"java-class\":\"java.util.List\",\"default\":null},\"default\":null},{\"name\":\"team2Scores\",\"type\":{\"type\":\"array\",\"items\":\"Score\",\"java-class\":\"java.util.List\",\"default\":null},\"default\":null},{\"name\":\"winner\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<MatchSummary> ENCODER =
      new BinaryMessageEncoder<MatchSummary>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<MatchSummary> DECODER =
      new BinaryMessageDecoder<MatchSummary>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<MatchSummary> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<MatchSummary> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<MatchSummary>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this MatchSummary to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a MatchSummary from a ByteBuffer. */
  public static MatchSummary fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence Team1;
  @Deprecated public java.lang.CharSequence Team2;
  @Deprecated public java.lang.CharSequence location;
  @Deprecated public java.lang.CharSequence matchDate;
  @Deprecated public long matchNum;
  @Deprecated public java.lang.CharSequence result;
  @Deprecated public java.lang.CharSequence stadium;
  @Deprecated public java.util.List<com.iEngg.kafka.schemas.Score> team1Scores;
  @Deprecated public java.util.List<com.iEngg.kafka.schemas.Score> team2Scores;
  @Deprecated public java.lang.CharSequence winner;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public MatchSummary() {}

  /**
   * All-args constructor.
   * @param Team1 The new value for Team1
   * @param Team2 The new value for Team2
   * @param location The new value for location
   * @param matchDate The new value for matchDate
   * @param matchNum The new value for matchNum
   * @param result The new value for result
   * @param stadium The new value for stadium
   * @param team1Scores The new value for team1Scores
   * @param team2Scores The new value for team2Scores
   * @param winner The new value for winner
   */
  public MatchSummary(java.lang.CharSequence Team1, java.lang.CharSequence Team2, java.lang.CharSequence location, java.lang.CharSequence matchDate, java.lang.Long matchNum, java.lang.CharSequence result, java.lang.CharSequence stadium, java.util.List<com.iEngg.kafka.schemas.Score> team1Scores, java.util.List<com.iEngg.kafka.schemas.Score> team2Scores, java.lang.CharSequence winner) {
    this.Team1 = Team1;
    this.Team2 = Team2;
    this.location = location;
    this.matchDate = matchDate;
    this.matchNum = matchNum;
    this.result = result;
    this.stadium = stadium;
    this.team1Scores = team1Scores;
    this.team2Scores = team2Scores;
    this.winner = winner;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return Team1;
    case 1: return Team2;
    case 2: return location;
    case 3: return matchDate;
    case 4: return matchNum;
    case 5: return result;
    case 6: return stadium;
    case 7: return team1Scores;
    case 8: return team2Scores;
    case 9: return winner;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: Team1 = (java.lang.CharSequence)value$; break;
    case 1: Team2 = (java.lang.CharSequence)value$; break;
    case 2: location = (java.lang.CharSequence)value$; break;
    case 3: matchDate = (java.lang.CharSequence)value$; break;
    case 4: matchNum = (java.lang.Long)value$; break;
    case 5: result = (java.lang.CharSequence)value$; break;
    case 6: stadium = (java.lang.CharSequence)value$; break;
    case 7: team1Scores = (java.util.List<com.iEngg.kafka.schemas.Score>)value$; break;
    case 8: team2Scores = (java.util.List<com.iEngg.kafka.schemas.Score>)value$; break;
    case 9: winner = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'Team1' field.
   * @return The value of the 'Team1' field.
   */
  public java.lang.CharSequence getTeam1() {
    return Team1;
  }

  /**
   * Sets the value of the 'Team1' field.
   * @param value the value to set.
   */
  public void setTeam1(java.lang.CharSequence value) {
    this.Team1 = value;
  }

  /**
   * Gets the value of the 'Team2' field.
   * @return The value of the 'Team2' field.
   */
  public java.lang.CharSequence getTeam2() {
    return Team2;
  }

  /**
   * Sets the value of the 'Team2' field.
   * @param value the value to set.
   */
  public void setTeam2(java.lang.CharSequence value) {
    this.Team2 = value;
  }

  /**
   * Gets the value of the 'location' field.
   * @return The value of the 'location' field.
   */
  public java.lang.CharSequence getLocation() {
    return location;
  }

  /**
   * Sets the value of the 'location' field.
   * @param value the value to set.
   */
  public void setLocation(java.lang.CharSequence value) {
    this.location = value;
  }

  /**
   * Gets the value of the 'matchDate' field.
   * @return The value of the 'matchDate' field.
   */
  public java.lang.CharSequence getMatchDate() {
    return matchDate;
  }

  /**
   * Sets the value of the 'matchDate' field.
   * @param value the value to set.
   */
  public void setMatchDate(java.lang.CharSequence value) {
    this.matchDate = value;
  }

  /**
   * Gets the value of the 'matchNum' field.
   * @return The value of the 'matchNum' field.
   */
  public java.lang.Long getMatchNum() {
    return matchNum;
  }

  /**
   * Sets the value of the 'matchNum' field.
   * @param value the value to set.
   */
  public void setMatchNum(java.lang.Long value) {
    this.matchNum = value;
  }

  /**
   * Gets the value of the 'result' field.
   * @return The value of the 'result' field.
   */
  public java.lang.CharSequence getResult() {
    return result;
  }

  /**
   * Sets the value of the 'result' field.
   * @param value the value to set.
   */
  public void setResult(java.lang.CharSequence value) {
    this.result = value;
  }

  /**
   * Gets the value of the 'stadium' field.
   * @return The value of the 'stadium' field.
   */
  public java.lang.CharSequence getStadium() {
    return stadium;
  }

  /**
   * Sets the value of the 'stadium' field.
   * @param value the value to set.
   */
  public void setStadium(java.lang.CharSequence value) {
    this.stadium = value;
  }

  /**
   * Gets the value of the 'team1Scores' field.
   * @return The value of the 'team1Scores' field.
   */
  public java.util.List<com.iEngg.kafka.schemas.Score> getTeam1Scores() {
    return team1Scores;
  }

  /**
   * Sets the value of the 'team1Scores' field.
   * @param value the value to set.
   */
  public void setTeam1Scores(java.util.List<com.iEngg.kafka.schemas.Score> value) {
    this.team1Scores = value;
  }

  /**
   * Gets the value of the 'team2Scores' field.
   * @return The value of the 'team2Scores' field.
   */
  public java.util.List<com.iEngg.kafka.schemas.Score> getTeam2Scores() {
    return team2Scores;
  }

  /**
   * Sets the value of the 'team2Scores' field.
   * @param value the value to set.
   */
  public void setTeam2Scores(java.util.List<com.iEngg.kafka.schemas.Score> value) {
    this.team2Scores = value;
  }

  /**
   * Gets the value of the 'winner' field.
   * @return The value of the 'winner' field.
   */
  public java.lang.CharSequence getWinner() {
    return winner;
  }

  /**
   * Sets the value of the 'winner' field.
   * @param value the value to set.
   */
  public void setWinner(java.lang.CharSequence value) {
    this.winner = value;
  }

  /**
   * Creates a new MatchSummary RecordBuilder.
   * @return A new MatchSummary RecordBuilder
   */
  public static com.iEngg.kafka.schemas.MatchSummary.Builder newBuilder() {
    return new com.iEngg.kafka.schemas.MatchSummary.Builder();
  }

  /**
   * Creates a new MatchSummary RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new MatchSummary RecordBuilder
   */
  public static com.iEngg.kafka.schemas.MatchSummary.Builder newBuilder(com.iEngg.kafka.schemas.MatchSummary.Builder other) {
    return new com.iEngg.kafka.schemas.MatchSummary.Builder(other);
  }

  /**
   * Creates a new MatchSummary RecordBuilder by copying an existing MatchSummary instance.
   * @param other The existing instance to copy.
   * @return A new MatchSummary RecordBuilder
   */
  public static com.iEngg.kafka.schemas.MatchSummary.Builder newBuilder(com.iEngg.kafka.schemas.MatchSummary other) {
    return new com.iEngg.kafka.schemas.MatchSummary.Builder(other);
  }

  /**
   * RecordBuilder for MatchSummary instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<MatchSummary>
    implements org.apache.avro.data.RecordBuilder<MatchSummary> {

    private java.lang.CharSequence Team1;
    private java.lang.CharSequence Team2;
    private java.lang.CharSequence location;
    private java.lang.CharSequence matchDate;
    private long matchNum;
    private java.lang.CharSequence result;
    private java.lang.CharSequence stadium;
    private java.util.List<com.iEngg.kafka.schemas.Score> team1Scores;
    private java.util.List<com.iEngg.kafka.schemas.Score> team2Scores;
    private java.lang.CharSequence winner;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.iEngg.kafka.schemas.MatchSummary.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.Team1)) {
        this.Team1 = data().deepCopy(fields()[0].schema(), other.Team1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Team2)) {
        this.Team2 = data().deepCopy(fields()[1].schema(), other.Team2);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.location)) {
        this.location = data().deepCopy(fields()[2].schema(), other.location);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.matchDate)) {
        this.matchDate = data().deepCopy(fields()[3].schema(), other.matchDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.matchNum)) {
        this.matchNum = data().deepCopy(fields()[4].schema(), other.matchNum);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.result)) {
        this.result = data().deepCopy(fields()[5].schema(), other.result);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.stadium)) {
        this.stadium = data().deepCopy(fields()[6].schema(), other.stadium);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.team1Scores)) {
        this.team1Scores = data().deepCopy(fields()[7].schema(), other.team1Scores);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.team2Scores)) {
        this.team2Scores = data().deepCopy(fields()[8].schema(), other.team2Scores);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.winner)) {
        this.winner = data().deepCopy(fields()[9].schema(), other.winner);
        fieldSetFlags()[9] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing MatchSummary instance
     * @param other The existing instance to copy.
     */
    private Builder(com.iEngg.kafka.schemas.MatchSummary other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.Team1)) {
        this.Team1 = data().deepCopy(fields()[0].schema(), other.Team1);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Team2)) {
        this.Team2 = data().deepCopy(fields()[1].schema(), other.Team2);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.location)) {
        this.location = data().deepCopy(fields()[2].schema(), other.location);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.matchDate)) {
        this.matchDate = data().deepCopy(fields()[3].schema(), other.matchDate);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.matchNum)) {
        this.matchNum = data().deepCopy(fields()[4].schema(), other.matchNum);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.result)) {
        this.result = data().deepCopy(fields()[5].schema(), other.result);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.stadium)) {
        this.stadium = data().deepCopy(fields()[6].schema(), other.stadium);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.team1Scores)) {
        this.team1Scores = data().deepCopy(fields()[7].schema(), other.team1Scores);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.team2Scores)) {
        this.team2Scores = data().deepCopy(fields()[8].schema(), other.team2Scores);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.winner)) {
        this.winner = data().deepCopy(fields()[9].schema(), other.winner);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'Team1' field.
      * @return The value.
      */
    public java.lang.CharSequence getTeam1() {
      return Team1;
    }

    /**
      * Sets the value of the 'Team1' field.
      * @param value The value of 'Team1'.
      * @return This builder.
      */
    public com.iEngg.kafka.schemas.MatchSummary.Builder setTeam1(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.Team1 = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'Team1' field has been set.
      * @return True if the 'Team1' field has been set, false otherwise.
      */
    public boolean hasTeam1() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'Team1' field.
      * @return This builder.
      */
    public com.iEngg.kafka.schemas.MatchSummary.Builder clearTeam1() {
      Team1 = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'Team2' field.
      * @return The value.
      */
    public java.lang.CharSequence getTeam2() {
      return Team2;
    }

    /**
      * Sets the value of the 'Team2' field.
      * @param value The value of 'Team2'.
      * @return This builder.
      */
    public com.iEngg.kafka.schemas.MatchSummary.Builder setTeam2(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.Team2 = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'Team2' field has been set.
      * @return True if the 'Team2' field has been set, false otherwise.
      */
    public boolean hasTeam2() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'Team2' field.
      * @return This builder.
      */
    public com.iEngg.kafka.schemas.MatchSummary.Builder clearTeam2() {
      Team2 = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'location' field.
      * @return The value.
      */
    public java.lang.CharSequence getLocation() {
      return location;
    }

    /**
      * Sets the value of the 'location' field.
      * @param value The value of 'location'.
      * @return This builder.
      */
    public com.iEngg.kafka.schemas.MatchSummary.Builder setLocation(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.location = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'location' field has been set.
      * @return True if the 'location' field has been set, false otherwise.
      */
    public boolean hasLocation() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'location' field.
      * @return This builder.
      */
    public com.iEngg.kafka.schemas.MatchSummary.Builder clearLocation() {
      location = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'matchDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getMatchDate() {
      return matchDate;
    }

    /**
      * Sets the value of the 'matchDate' field.
      * @param value The value of 'matchDate'.
      * @return This builder.
      */
    public com.iEngg.kafka.schemas.MatchSummary.Builder setMatchDate(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.matchDate = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'matchDate' field has been set.
      * @return True if the 'matchDate' field has been set, false otherwise.
      */
    public boolean hasMatchDate() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'matchDate' field.
      * @return This builder.
      */
    public com.iEngg.kafka.schemas.MatchSummary.Builder clearMatchDate() {
      matchDate = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'matchNum' field.
      * @return The value.
      */
    public java.lang.Long getMatchNum() {
      return matchNum;
    }

    /**
      * Sets the value of the 'matchNum' field.
      * @param value The value of 'matchNum'.
      * @return This builder.
      */
    public com.iEngg.kafka.schemas.MatchSummary.Builder setMatchNum(long value) {
      validate(fields()[4], value);
      this.matchNum = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'matchNum' field has been set.
      * @return True if the 'matchNum' field has been set, false otherwise.
      */
    public boolean hasMatchNum() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'matchNum' field.
      * @return This builder.
      */
    public com.iEngg.kafka.schemas.MatchSummary.Builder clearMatchNum() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'result' field.
      * @return The value.
      */
    public java.lang.CharSequence getResult() {
      return result;
    }

    /**
      * Sets the value of the 'result' field.
      * @param value The value of 'result'.
      * @return This builder.
      */
    public com.iEngg.kafka.schemas.MatchSummary.Builder setResult(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.result = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'result' field has been set.
      * @return True if the 'result' field has been set, false otherwise.
      */
    public boolean hasResult() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'result' field.
      * @return This builder.
      */
    public com.iEngg.kafka.schemas.MatchSummary.Builder clearResult() {
      result = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'stadium' field.
      * @return The value.
      */
    public java.lang.CharSequence getStadium() {
      return stadium;
    }

    /**
      * Sets the value of the 'stadium' field.
      * @param value The value of 'stadium'.
      * @return This builder.
      */
    public com.iEngg.kafka.schemas.MatchSummary.Builder setStadium(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.stadium = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'stadium' field has been set.
      * @return True if the 'stadium' field has been set, false otherwise.
      */
    public boolean hasStadium() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'stadium' field.
      * @return This builder.
      */
    public com.iEngg.kafka.schemas.MatchSummary.Builder clearStadium() {
      stadium = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'team1Scores' field.
      * @return The value.
      */
    public java.util.List<com.iEngg.kafka.schemas.Score> getTeam1Scores() {
      return team1Scores;
    }

    /**
      * Sets the value of the 'team1Scores' field.
      * @param value The value of 'team1Scores'.
      * @return This builder.
      */
    public com.iEngg.kafka.schemas.MatchSummary.Builder setTeam1Scores(java.util.List<com.iEngg.kafka.schemas.Score> value) {
      validate(fields()[7], value);
      this.team1Scores = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'team1Scores' field has been set.
      * @return True if the 'team1Scores' field has been set, false otherwise.
      */
    public boolean hasTeam1Scores() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'team1Scores' field.
      * @return This builder.
      */
    public com.iEngg.kafka.schemas.MatchSummary.Builder clearTeam1Scores() {
      team1Scores = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'team2Scores' field.
      * @return The value.
      */
    public java.util.List<com.iEngg.kafka.schemas.Score> getTeam2Scores() {
      return team2Scores;
    }

    /**
      * Sets the value of the 'team2Scores' field.
      * @param value The value of 'team2Scores'.
      * @return This builder.
      */
    public com.iEngg.kafka.schemas.MatchSummary.Builder setTeam2Scores(java.util.List<com.iEngg.kafka.schemas.Score> value) {
      validate(fields()[8], value);
      this.team2Scores = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'team2Scores' field has been set.
      * @return True if the 'team2Scores' field has been set, false otherwise.
      */
    public boolean hasTeam2Scores() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'team2Scores' field.
      * @return This builder.
      */
    public com.iEngg.kafka.schemas.MatchSummary.Builder clearTeam2Scores() {
      team2Scores = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'winner' field.
      * @return The value.
      */
    public java.lang.CharSequence getWinner() {
      return winner;
    }

    /**
      * Sets the value of the 'winner' field.
      * @param value The value of 'winner'.
      * @return This builder.
      */
    public com.iEngg.kafka.schemas.MatchSummary.Builder setWinner(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.winner = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'winner' field has been set.
      * @return True if the 'winner' field has been set, false otherwise.
      */
    public boolean hasWinner() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'winner' field.
      * @return This builder.
      */
    public com.iEngg.kafka.schemas.MatchSummary.Builder clearWinner() {
      winner = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public MatchSummary build() {
      try {
        MatchSummary record = new MatchSummary();
        record.Team1 = fieldSetFlags()[0] ? this.Team1 : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.Team2 = fieldSetFlags()[1] ? this.Team2 : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.location = fieldSetFlags()[2] ? this.location : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.matchDate = fieldSetFlags()[3] ? this.matchDate : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.matchNum = fieldSetFlags()[4] ? this.matchNum : (java.lang.Long) defaultValue(fields()[4]);
        record.result = fieldSetFlags()[5] ? this.result : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.stadium = fieldSetFlags()[6] ? this.stadium : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.team1Scores = fieldSetFlags()[7] ? this.team1Scores : (java.util.List<com.iEngg.kafka.schemas.Score>) defaultValue(fields()[7]);
        record.team2Scores = fieldSetFlags()[8] ? this.team2Scores : (java.util.List<com.iEngg.kafka.schemas.Score>) defaultValue(fields()[8]);
        record.winner = fieldSetFlags()[9] ? this.winner : (java.lang.CharSequence) defaultValue(fields()[9]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<MatchSummary>
    WRITER$ = (org.apache.avro.io.DatumWriter<MatchSummary>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<MatchSummary>
    READER$ = (org.apache.avro.io.DatumReader<MatchSummary>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}

/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.iEngg.kafka.schemas;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Score extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2309925830011253965L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Score\",\"namespace\":\"com.iEngg.kafka.schemas\",\"fields\":[{\"name\":\"PlayerName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"ballsPlayed\",\"type\":\"long\",\"default\":-1},{\"name\":\"run\",\"type\":\"long\",\"default\":-1}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Score> ENCODER =
      new BinaryMessageEncoder<Score>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Score> DECODER =
      new BinaryMessageDecoder<Score>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<Score> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<Score> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Score>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this Score to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a Score from a ByteBuffer. */
  public static Score fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence PlayerName;
  @Deprecated public long ballsPlayed;
  @Deprecated public long run;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Score() {}

  /**
   * All-args constructor.
   * @param PlayerName The new value for PlayerName
   * @param ballsPlayed The new value for ballsPlayed
   * @param run The new value for run
   */
  public Score(java.lang.CharSequence PlayerName, java.lang.Long ballsPlayed, java.lang.Long run) {
    this.PlayerName = PlayerName;
    this.ballsPlayed = ballsPlayed;
    this.run = run;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return PlayerName;
    case 1: return ballsPlayed;
    case 2: return run;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: PlayerName = (java.lang.CharSequence)value$; break;
    case 1: ballsPlayed = (java.lang.Long)value$; break;
    case 2: run = (java.lang.Long)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'PlayerName' field.
   * @return The value of the 'PlayerName' field.
   */
  public java.lang.CharSequence getPlayerName() {
    return PlayerName;
  }

  /**
   * Sets the value of the 'PlayerName' field.
   * @param value the value to set.
   */
  public void setPlayerName(java.lang.CharSequence value) {
    this.PlayerName = value;
  }

  /**
   * Gets the value of the 'ballsPlayed' field.
   * @return The value of the 'ballsPlayed' field.
   */
  public java.lang.Long getBallsPlayed() {
    return ballsPlayed;
  }

  /**
   * Sets the value of the 'ballsPlayed' field.
   * @param value the value to set.
   */
  public void setBallsPlayed(java.lang.Long value) {
    this.ballsPlayed = value;
  }

  /**
   * Gets the value of the 'run' field.
   * @return The value of the 'run' field.
   */
  public java.lang.Long getRun() {
    return run;
  }

  /**
   * Sets the value of the 'run' field.
   * @param value the value to set.
   */
  public void setRun(java.lang.Long value) {
    this.run = value;
  }

  /**
   * Creates a new Score RecordBuilder.
   * @return A new Score RecordBuilder
   */
  public static com.iEngg.kafka.schemas.Score.Builder newBuilder() {
    return new com.iEngg.kafka.schemas.Score.Builder();
  }

  /**
   * Creates a new Score RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Score RecordBuilder
   */
  public static com.iEngg.kafka.schemas.Score.Builder newBuilder(com.iEngg.kafka.schemas.Score.Builder other) {
    return new com.iEngg.kafka.schemas.Score.Builder(other);
  }

  /**
   * Creates a new Score RecordBuilder by copying an existing Score instance.
   * @param other The existing instance to copy.
   * @return A new Score RecordBuilder
   */
  public static com.iEngg.kafka.schemas.Score.Builder newBuilder(com.iEngg.kafka.schemas.Score other) {
    return new com.iEngg.kafka.schemas.Score.Builder(other);
  }

  /**
   * RecordBuilder for Score instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Score>
    implements org.apache.avro.data.RecordBuilder<Score> {

    private java.lang.CharSequence PlayerName;
    private long ballsPlayed;
    private long run;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.iEngg.kafka.schemas.Score.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.PlayerName)) {
        this.PlayerName = data().deepCopy(fields()[0].schema(), other.PlayerName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ballsPlayed)) {
        this.ballsPlayed = data().deepCopy(fields()[1].schema(), other.ballsPlayed);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.run)) {
        this.run = data().deepCopy(fields()[2].schema(), other.run);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing Score instance
     * @param other The existing instance to copy.
     */
    private Builder(com.iEngg.kafka.schemas.Score other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.PlayerName)) {
        this.PlayerName = data().deepCopy(fields()[0].schema(), other.PlayerName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.ballsPlayed)) {
        this.ballsPlayed = data().deepCopy(fields()[1].schema(), other.ballsPlayed);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.run)) {
        this.run = data().deepCopy(fields()[2].schema(), other.run);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'PlayerName' field.
      * @return The value.
      */
    public java.lang.CharSequence getPlayerName() {
      return PlayerName;
    }

    /**
      * Sets the value of the 'PlayerName' field.
      * @param value The value of 'PlayerName'.
      * @return This builder.
      */
    public com.iEngg.kafka.schemas.Score.Builder setPlayerName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.PlayerName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'PlayerName' field has been set.
      * @return True if the 'PlayerName' field has been set, false otherwise.
      */
    public boolean hasPlayerName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'PlayerName' field.
      * @return This builder.
      */
    public com.iEngg.kafka.schemas.Score.Builder clearPlayerName() {
      PlayerName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'ballsPlayed' field.
      * @return The value.
      */
    public java.lang.Long getBallsPlayed() {
      return ballsPlayed;
    }

    /**
      * Sets the value of the 'ballsPlayed' field.
      * @param value The value of 'ballsPlayed'.
      * @return This builder.
      */
    public com.iEngg.kafka.schemas.Score.Builder setBallsPlayed(long value) {
      validate(fields()[1], value);
      this.ballsPlayed = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'ballsPlayed' field has been set.
      * @return True if the 'ballsPlayed' field has been set, false otherwise.
      */
    public boolean hasBallsPlayed() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'ballsPlayed' field.
      * @return This builder.
      */
    public com.iEngg.kafka.schemas.Score.Builder clearBallsPlayed() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'run' field.
      * @return The value.
      */
    public java.lang.Long getRun() {
      return run;
    }

    /**
      * Sets the value of the 'run' field.
      * @param value The value of 'run'.
      * @return This builder.
      */
    public com.iEngg.kafka.schemas.Score.Builder setRun(long value) {
      validate(fields()[2], value);
      this.run = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'run' field has been set.
      * @return True if the 'run' field has been set, false otherwise.
      */
    public boolean hasRun() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'run' field.
      * @return This builder.
      */
    public com.iEngg.kafka.schemas.Score.Builder clearRun() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Score build() {
      try {
        Score record = new Score();
        record.PlayerName = fieldSetFlags()[0] ? this.PlayerName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.ballsPlayed = fieldSetFlags()[1] ? this.ballsPlayed : (java.lang.Long) defaultValue(fields()[1]);
        record.run = fieldSetFlags()[2] ? this.run : (java.lang.Long) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Score>
    WRITER$ = (org.apache.avro.io.DatumWriter<Score>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Score>
    READER$ = (org.apache.avro.io.DatumReader<Score>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}

/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.iEngg.Streams.Kafka.schemas;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class CollateralDetail extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1460351259797015411L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CollateralDetail\",\"namespace\":\"com.vishaluplanch.org.schemas\",\"fields\":[{\"name\":\"collateralDesc\",\"type\":\"string\"},{\"name\":\"collateralId\",\"type\":\"long\"},{\"name\":\"collateralType\",\"type\":\"string\"},{\"name\":\"collateralValue\",\"type\":{\"type\":\"string\",\"java-class\":\"java.math.BigDecimal\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<CollateralDetail> ENCODER =
      new BinaryMessageEncoder<CollateralDetail>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<CollateralDetail> DECODER =
      new BinaryMessageDecoder<CollateralDetail>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<CollateralDetail> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<CollateralDetail> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<CollateralDetail>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this CollateralDetail to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a CollateralDetail from a ByteBuffer. */
  public static CollateralDetail fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence collateralDesc;
  @Deprecated public long collateralId;
  @Deprecated public java.lang.CharSequence collateralType;
  @Deprecated public java.math.BigDecimal collateralValue;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CollateralDetail() {}

  /**
   * All-args constructor.
   * @param collateralDesc The new value for collateralDesc
   * @param collateralId The new value for collateralId
   * @param collateralType The new value for collateralType
   * @param collateralValue The new value for collateralValue
   */
  public CollateralDetail(java.lang.CharSequence collateralDesc, java.lang.Long collateralId, java.lang.CharSequence collateralType, java.math.BigDecimal collateralValue) {
    this.collateralDesc = collateralDesc;
    this.collateralId = collateralId;
    this.collateralType = collateralType;
    this.collateralValue = collateralValue;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return collateralDesc;
    case 1: return collateralId;
    case 2: return collateralType;
    case 3: return collateralValue;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: collateralDesc = (java.lang.CharSequence)value$; break;
    case 1: collateralId = (java.lang.Long)value$; break;
    case 2: collateralType = (java.lang.CharSequence)value$; break;
    case 3: collateralValue = (java.math.BigDecimal)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'collateralDesc' field.
   * @return The value of the 'collateralDesc' field.
   */
  public java.lang.CharSequence getCollateralDesc() {
    return collateralDesc;
  }

  /**
   * Sets the value of the 'collateralDesc' field.
   * @param value the value to set.
   */
  public void setCollateralDesc(java.lang.CharSequence value) {
    this.collateralDesc = value;
  }

  /**
   * Gets the value of the 'collateralId' field.
   * @return The value of the 'collateralId' field.
   */
  public java.lang.Long getCollateralId() {
    return collateralId;
  }

  /**
   * Sets the value of the 'collateralId' field.
   * @param value the value to set.
   */
  public void setCollateralId(java.lang.Long value) {
    this.collateralId = value;
  }

  /**
   * Gets the value of the 'collateralType' field.
   * @return The value of the 'collateralType' field.
   */
  public java.lang.CharSequence getCollateralType() {
    return collateralType;
  }

  /**
   * Sets the value of the 'collateralType' field.
   * @param value the value to set.
   */
  public void setCollateralType(java.lang.CharSequence value) {
    this.collateralType = value;
  }

  /**
   * Gets the value of the 'collateralValue' field.
   * @return The value of the 'collateralValue' field.
   */
  public java.math.BigDecimal getCollateralValue() {
    return collateralValue;
  }

  /**
   * Sets the value of the 'collateralValue' field.
   * @param value the value to set.
   */
  public void setCollateralValue(java.math.BigDecimal value) {
    this.collateralValue = value;
  }

  /**
   * Creates a new CollateralDetail RecordBuilder.
   * @return A new CollateralDetail RecordBuilder
   */
  public static CollateralDetail.Builder newBuilder() {
    return new CollateralDetail.Builder();
  }

  /**
   * Creates a new CollateralDetail RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CollateralDetail RecordBuilder
   */
  public static CollateralDetail.Builder newBuilder(CollateralDetail.Builder other) {
    return new CollateralDetail.Builder(other);
  }

  /**
   * Creates a new CollateralDetail RecordBuilder by copying an existing CollateralDetail instance.
   * @param other The existing instance to copy.
   * @return A new CollateralDetail RecordBuilder
   */
  public static CollateralDetail.Builder newBuilder(CollateralDetail other) {
    return new CollateralDetail.Builder(other);
  }

  /**
   * RecordBuilder for CollateralDetail instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CollateralDetail>
    implements org.apache.avro.data.RecordBuilder<CollateralDetail> {

    private java.lang.CharSequence collateralDesc;
    private long collateralId;
    private java.lang.CharSequence collateralType;
    private java.math.BigDecimal collateralValue;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(CollateralDetail.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.collateralDesc)) {
        this.collateralDesc = data().deepCopy(fields()[0].schema(), other.collateralDesc);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.collateralId)) {
        this.collateralId = data().deepCopy(fields()[1].schema(), other.collateralId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.collateralType)) {
        this.collateralType = data().deepCopy(fields()[2].schema(), other.collateralType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.collateralValue)) {
        this.collateralValue = data().deepCopy(fields()[3].schema(), other.collateralValue);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CollateralDetail instance
     * @param other The existing instance to copy.
     */
    private Builder(CollateralDetail other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.collateralDesc)) {
        this.collateralDesc = data().deepCopy(fields()[0].schema(), other.collateralDesc);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.collateralId)) {
        this.collateralId = data().deepCopy(fields()[1].schema(), other.collateralId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.collateralType)) {
        this.collateralType = data().deepCopy(fields()[2].schema(), other.collateralType);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.collateralValue)) {
        this.collateralValue = data().deepCopy(fields()[3].schema(), other.collateralValue);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'collateralDesc' field.
      * @return The value.
      */
    public java.lang.CharSequence getCollateralDesc() {
      return collateralDesc;
    }

    /**
      * Sets the value of the 'collateralDesc' field.
      * @param value The value of 'collateralDesc'.
      * @return This builder.
      */
    public CollateralDetail.Builder setCollateralDesc(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.collateralDesc = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'collateralDesc' field has been set.
      * @return True if the 'collateralDesc' field has been set, false otherwise.
      */
    public boolean hasCollateralDesc() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'collateralDesc' field.
      * @return This builder.
      */
    public CollateralDetail.Builder clearCollateralDesc() {
      collateralDesc = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'collateralId' field.
      * @return The value.
      */
    public java.lang.Long getCollateralId() {
      return collateralId;
    }

    /**
      * Sets the value of the 'collateralId' field.
      * @param value The value of 'collateralId'.
      * @return This builder.
      */
    public CollateralDetail.Builder setCollateralId(long value) {
      validate(fields()[1], value);
      this.collateralId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'collateralId' field has been set.
      * @return True if the 'collateralId' field has been set, false otherwise.
      */
    public boolean hasCollateralId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'collateralId' field.
      * @return This builder.
      */
    public CollateralDetail.Builder clearCollateralId() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'collateralType' field.
      * @return The value.
      */
    public java.lang.CharSequence getCollateralType() {
      return collateralType;
    }

    /**
      * Sets the value of the 'collateralType' field.
      * @param value The value of 'collateralType'.
      * @return This builder.
      */
    public CollateralDetail.Builder setCollateralType(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.collateralType = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'collateralType' field has been set.
      * @return True if the 'collateralType' field has been set, false otherwise.
      */
    public boolean hasCollateralType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'collateralType' field.
      * @return This builder.
      */
    public CollateralDetail.Builder clearCollateralType() {
      collateralType = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'collateralValue' field.
      * @return The value.
      */
    public java.math.BigDecimal getCollateralValue() {
      return collateralValue;
    }

    /**
      * Sets the value of the 'collateralValue' field.
      * @param value The value of 'collateralValue'.
      * @return This builder.
      */
    public CollateralDetail.Builder setCollateralValue(java.math.BigDecimal value) {
      validate(fields()[3], value);
      this.collateralValue = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'collateralValue' field has been set.
      * @return True if the 'collateralValue' field has been set, false otherwise.
      */
    public boolean hasCollateralValue() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'collateralValue' field.
      * @return This builder.
      */
    public CollateralDetail.Builder clearCollateralValue() {
      collateralValue = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public CollateralDetail build() {
      try {
        CollateralDetail record = new CollateralDetail();
        record.collateralDesc = fieldSetFlags()[0] ? this.collateralDesc : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.collateralId = fieldSetFlags()[1] ? this.collateralId : (java.lang.Long) defaultValue(fields()[1]);
        record.collateralType = fieldSetFlags()[2] ? this.collateralType : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.collateralValue = fieldSetFlags()[3] ? this.collateralValue : (java.math.BigDecimal) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<CollateralDetail>
    WRITER$ = (org.apache.avro.io.DatumWriter<CollateralDetail>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<CollateralDetail>
    READER$ = (org.apache.avro.io.DatumReader<CollateralDetail>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
